knitr::opts_chunk$set(echo = TRUE)
# library to read Matlab data formats into R
library(R.matlab)
# read in the cats and dogs data
dogdata_mat <- readMat('C:/Users/SHOSTIOU/Documents/03 - Formation/14 - Univ Washington/UW_Data/DATA_PYTHON/DATA/dogData.mat')
catdata_mat <- readMat('C:/Users/SHOSTIOU/Documents/03 - Formation/14 - Univ Washington/UW_Data/DATA_PYTHON/DATA/catData.mat')
#Wavelet
dogdata_w_mat  <- readMat('C:/Users/SHOSTIOU/Documents/03 - Formation/14 - Univ Washington/UW_Data/DATA_PYTHON/DATA/dogData_w.mat')
catdata_w_mat  <- readMat('C:/Users/SHOSTIOU/Documents/03 - Formation/14 - Univ Washington/UW_Data/DATA_PYTHON/DATA/catData_w.mat')
dog <- dogdata_mat$dog
cat <- dogdata_mat$cat
dog_wave <- dogdata_w_mat$dog
cat_wave <- catdata_w_mat$cat
# Concatenation of Cats & Dogs data
CD<-rbind(cat,dog)
# same fot wavelet transformed data
CD2<-rbind(cat_wave,dog_wave)
#Computing the SVD for the 2 concatenated datasets
SVD1 <- svd(CD-mean(CD))
SVD2 <- svd(CD2-mean(CD2))
library(pracma)
library(scanstatistics)
# Lets create a subplot 2 x 2
par(mfrow=c(2,2))
# displaying the SVD
for (i in c(1:4)) {
temp_U <- flipud(matrix(SVD1$u[,i],64,64))
# flipping up and down
U <- temp_U[64:1,]
U <- U[seq(1,64,2),seq(1,64,2)]
image(rot90(U,3))
}
# type your code for the Exercise here, and Knit
params
params <- ames %>%
summarise(mu = mean(area))
set.seed(05091977)                 # make sure to change the seed
library(statsr)
library(dplyr)
library(ggplot2)
data(ames)
n <- 60
samp <- sample_n(ames, n)
# We can use the sample mean to get an approximation of the population mean
mean(samp$area)
## As it embeds random samples and has n < 10% population size, the shape of the distribution
## shall be quite similar to the population distrubution => meaning it shall also be the case for the other. With a mean samples being quite clode to the population mean
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
# type your code for the Exercise here, and Knit
params
## Yes it is in the range
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code for the Exercise here, and Knit
z_start_99 = 2.58
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_99 * (sd(area) / sqrt(n)))
# type your code for the Exercise here, and Knit
z_start_99 <- 2.58
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_99 * (sd(area) / sqrt(n)))
# type your code for the Exercise here, and Knit
z_star_99 <- 2.58
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_99 * (sd(area) / sqrt(n)))
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code for the Exercise here, and Knit
z_star_99 <- 2.58
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_99 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code for the Exercise here, and Knit
z_star_99 <- 2.58
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_99 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_99 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# histogram
hist(score_mod3$residuals)
library(ggplot2)
library(dplyr)
library(statsr)
load("eaca_movies.RData")
# Plotting the distribution with ggplot
ggplot(data = movies, mapping = aes(x=critics_score))+
geom_histogram(binwidth = 3)+
ggtitle("Distribution of Critics score")
# Calculation of quantiles
quantile(movies$critics_score)
# Mean score
paste('mean critics_score : ',mean(movies$critics_score))
# Plotting the distribution with ggplot
ggplot(data = movies, mapping = aes(x=genre,y=critics_score, fill=genre))+
geom_boxplot()+
#Hidding xlabels
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
ggtitle("Distribution of Critics score per genre")
movies %>% select(genre,critics_score) %>% group_by(genre) %>%
summarize(min = min(critics_score), median=median(critics_score), mean=mean(critics_score), sd=sd(critics_score),max =max(critics_score)) %>% arrange(desc(mean))
# scatter plot
ggplot(movies)+
geom_point(mapping=aes(x=runtime,y=critics_score, color=genre)) +
ggtitle("critics_score vs movie runtime")
temp1 <- movies %>% na.omit()
cor(temp1$runtime,temp1$critics_score)
# scatter plot
ggplot(movies)+
geom_point(mapping=aes(x=imdb_rating,y=critics_score)) +
ggtitle("critics_score vs imbd_rating")
cor(movies$imdb_rating,movies$critics_score)
score_mod1 <- lm(critics_score ~ genre + runtime
+ mpaa_rating + thtr_rel_month + thtr_rel_day, data = movies)
summary(score_mod1)
score_mod2 <- lm(critics_score ~ genre + runtime
+ mpaa_rating + thtr_rel_day, data = movies)
summary(score_mod2)
score_mod3 <- lm(critics_score ~ genre + runtime
+ mpaa_rating, data = movies)
summary(score_mod3)
plot(na.omit(score_mod3$residuals) ~ na.omit(movies$runtime))
# histogram
hist(score_mod3$residuals)
# histogram
ggplot(data=score_mod3, aes(residuals)) +
geom_histogram()
# histogram
ggplot(data=score_mod3, aes(x=residuals)) +
geom_histogram()
# histogram
ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram()
# histogram
ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
ggplot(score_mod3, aes(sample = score_mod3$residuals)) + stat_qq() + geom_abline(slope = slope, intercept = int)
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
ggplot(score_mod3, aes(sample = score_mod3$residuals)) + geom_qq() + stat_qq_line()
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
ggplot(score_mod3, aes(sample = score_mod3$residuals)) + geom_qq() + stat_qq_line()
qqnorm(score_mod3$residuals)
qqline(score_mod3$residuals)
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
hist_residuals <-  ggplot(score_mod3, aes(sample = score_mod3$residuals))
+ geom_qq() + stat_qq_line()
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
hist_residuals <-  ggplot(score_mod3, aes(sample = score_mod3$residuals)) +
geom_qq() + stat_qq_line()
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, hist_residuals, labels = "AUTO")
install.packages("cowplot")
library(cowplot)
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
hist_residuals <-  ggplot(score_mod3, aes(sample = score_mod3$residuals)) +
geom_qq() + stat_qq_line()
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, hist_residuals, labels = "AUTO")
library(cowplot)
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(score_mod3, aes(sample = score_mod3$residuals)) +
geom_qq() + stat_qq_line()
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
?plot_grid
library(cowplot)
# histogram
hist_residuals <- ggplot(data=score_mod3, aes(x=score_mod3$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(score_mod3, aes(sample = score_mod3$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
ggplot()+
geom_point(mapping=aes(x=score_mod3$residuals,y=score_mod3$fitted)) +
ggtitle("residuals vs predicted")
ggplot()+
geom_point(mapping=aes(x=score_mod3$residuals,y=score_mod3$fitted)) +
ggtitle("residuals vs predicted")
plot(score_mod3$residuals ~ score_mod3$fitted)
ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=score_mod3$residuals)) +
ggtitle("residuals vs predicted")
plot(score_mod3$residuals ~ score_mod3$fitted)
residuals01 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=score_mod3$residuals)) +
ggtitle("residuals vs predicted")
residuals01 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=bas(score_mod3$residuals))) +
ggtitle("residuals vs predicted - absolute")
residuals01 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=score_mod3$residuals)) +
ggtitle("residuals vs predicted")
# Absolute value
residuals02 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=bas(score_mod3$residuals))) +
ggtitle("residuals vs predicted - absolute")
# calling plots
plot_grid(residuals01, residuals02, labels = "AUTO")
residuals01 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=score_mod3$residuals)) +
ggtitle("residuals vs predicted")
# Absolute value
residuals02 <- ggplot()+
geom_point(mapping=aes(x=score_mod3$fitted,y=abs(score_mod3$residuals))) +
ggtitle("residuals vs predicted - absolute")
# calling plots
plot_grid(residuals01, residuals02, labels = "AUTO")
residuals01b <- ggplot()+
geom_point(mapping=aes(x=score_mod2$fitted,y=score_mod2$residuals)) +
ggtitle("residuals vs predicted")
# Absolute value
residuals02b <- ggplot()+
geom_point(mapping=aes(x=score_mod2$fitted,y=abs(score_mod2$residuals))) +
ggtitle("residuals vs predicted - absolute")
# calling plots
plot_grid(residuals01b, residuals02b, labels = "AUTO")
residuals01b <- ggplot()+
geom_point(mapping=aes(x=score_mod1$fitted,y=score_mod1$residuals)) +
ggtitle("residuals vs predicted")
# Absolute value
residuals02b <- ggplot()+
geom_point(mapping=aes(x=score_mod1$fitted,y=abs(score_mod1$residuals))) +
ggtitle("residuals vs predicted - absolute")
# calling plots
plot_grid(residuals01b, residuals02b, labels = "AUTO")
ggplot()+
geom_point(mapping=aes(y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x,y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
plot(score_mod3$residuals)
ggplot()+
geom_point(mapping=aes(x=Index,y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot(data=score_mod3)+
geom_point(mapping=aes(x=Index,y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot(data=score_mod3)+
geom_point(mapping=aes(x=index,y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x=1:nrow(score_mod3),y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x=1:size(score_mod3$residuals),y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x=1:length(score_mod3$residuals),y=score_mod3$residuals)) +
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x=1:length(score_mod3$residuals),y=score_mod3$residuals)) +
xlab("index")+
ggtitle("plotting residuals in the order of data collection")
ggplot()+
geom_point(mapping=aes(x=1:length(score_mod3$residuals),y=score_mod3$residuals)) +
xlab("index")+ylab("residuals")+
ggtitle("plotting residuals in the order of data collection")
in_genre <- "Animation"
in_runtime <- 102 #1hour42min
in_mpaa <- "PG"
?predict
?predict.lm
my_in <- data.frame(genre = in_genre, runtime = in_runtime, mpaa = in_mpaa)
my_in <- data.frame(genre = in_genre, runtime = in_runtime, mpaa = in_mpaa)
predict(score_mod3,my_in)
my_in <- data.frame(genre = in_genre, runtime = in_runtime, mpaa_rating = in_mpaa)
predict(score_mod3,my_in)
setwd("~/03 - Formation/11 -Johns Hopkins/JohnsHopkins/M07 - W02")
knitr::opts_chunk$set(echo = TRUE)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
my_model <- lm(y~x)
summary(my_model)
data(mtcars)
library(ggplot2)
ggplot(mtcars) +
geom_point(mapping=aes(x=wt,y=mpg)
library(ggplot2)
ggplot(mtcars) +
geom_point(mapping=aes(x=wt,y=mpg))
# Getting the mean value of wt
mean(mtcars$wt)
# Getting the mean value of wt
wt_mean <- mean(mtcars$wt)
# fitting the linear model
mpg_model <- lm(mtcars$mpg ~mtacrs$wt)
# Getting the mean value of wt
wt_mean <- mean(mtcars$wt)
# fitting the linear model
mpg_model <- lm(mtcars$mpg ~mtcars$wt)
# displaying summary
summary(mpg_model)
predict(mpg_model,mtcars$wt = wt_mean)
predict(mpg_model,wt_mean)
predict(mpg_model,wt=wt_mean)
my_in <- data.frame(wt = wt_mean)
predict(mpg_model,wt=wt_mean)
my_in <- data.frame(mtcars$wt = wt_mean)
my_in <- data.frame(wt = wt_mean)
predict(mpg_model,my_in)
# Getting the mean value of wt
wt_mean <- mean(mtcars$wt)
# fitting the linear model
mpg_model <- lm(mtcars$mpg ~mtcars$wt)
# displaying summary
summary(mpg_model)
my_in <- data.frame(wt = wt_mean)
predict(mpg_model,my_in)
wt_mean <- mean(mtcars$wt)
my_in <- data.frame(wt = wt_mean)
predict(mpg_model,my_in)
my_in
mpg_model
# Getting the mean value of wt
wt_mean <- mean(mtcars$wt)
# fitting the linear model
mod_mpg <- mtcars$mpg
mod_wt <- mtcars$wt
mpg_model <- lm(mod_mpg~mod_wt)
# displaying summary
summary(mpg_model)
wt_mean <- mean(mtcars$wt)
my_in <- data.frame(mod_wt = wt_mean)
predict(mpg_model,my_in)
wt_mean <- mean(mtcars$wt)
my_in <- data.frame(mod_wt = wt_mean)
predict(mpg_model,my_in, interval="prediction")
wt_mean <- avg(mtcars$wt)
wt_mean <- mean(mtcars$wt)
my_in <- data.frame(mod_wt = wt_mean)
predict(mpg_model,my_in, interval="prediction")
wt_mean <- mean(mtcars$wt)
my_in <- data.frame(mod_wt = wt_mean)
predict(mpg_model,my_in, interval="confidence")
?mtcars
new_car<- 3000/1000
my_in <- data.frame(mod_wt = new_car)
predict(mpg_model,my_in, interval="confidence")
new_car<- 3000/1000
my_in <- data.frame(mod_wt = new_car)
predict(mpg_model,my_in, interval="prediction")
new_car<- 2000/1000
my_in <- data.frame(mod_wt = new_car)
predict(mpg_model,my_in, interval="confidence")
new_car<- 2000/1000
my_in <- data.frame(mod_wt = new_car)
predict(mpg_model,my_in, interval="confidence")
confint(mpg_model)
-6.486308 *2
# Model with just the intercept
(mtcars$mpg-(mtcars$wt+37.2851))
# Model with just the intercept
sum((mtcars$mpg-(mtcars$wt+37.2851))^2)
# Model with just the intercept
sum((mtcars$mpg-(mtcars$wt+37.2851))^2)
# Complete model
my_model$residuals^2
# Model with just the intercept
sum((mtcars$mpg-(mtcars$wt+37.2851))^2)
# Complete model
sum(mpg_model$residuals)^2
# Model with just the intercept
sum((mtcars$mpg-(mtcars$wt+37.2851))^2)
# Complete model
sum(mpg_model$residuals^2)
(mtcars$mpg-(mtcars$wt+37.2851))^2
(mtcars$mpg-(mtcars$wt+37.2851))
mpg_model$residuals
