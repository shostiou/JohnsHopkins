annotate("text", x = 2e+05, y = -4.1e+05 , label = "strong outlier", color='red')+
annotate("rect", xmin = 1.4e+05, xmax = 1.7e+05, ymin = -1.8e+05, ymax = -2.2e+05, color='red', alpha =0.2)+
annotate("text", x = 1.2e+05, y = -2.8e+05 , label = "strong outlier", color='red')
ggplot()+
geom_jitter(mapping = aes(x=na.omit(ames_train_2$price),y=na.omit(model.AIC$residuals)),alpha=0.4, color='black')+
xlab('training set price')+ylab('residuals')+
ggtitle('residuals vs training set prices')+
annotate("rect", xmin = 1.7e+05, xmax = 2e+05, ymin = -2.8e+05, ymax = -2.5e+05, color='red', alpha =0.2)+
annotate("text", x = 2e+05, y = -4.1e+05 , label = "strong outlier", color='red')+
annotate("rect", xmin = 1.4e+05, xmax = 1.7e+05, ymin = -1.8e+05, ymax = -2.2e+05, color='red', alpha =0.2)+
annotate("text", x = 1.2e+05, y = -2.8e+05 , label = "strong outlier", color='red')
ggplot()+
geom_jitter(mapping = aes(x=na.omit(ames_train_2$price),y=na.omit(model.AIC$residuals)),alpha=0.4, color='black')+
xlab('training set price')+ylab('residuals')+
ggtitle('residuals vs training set prices')+
annotate("rect", xmin = 1.7e+05, xmax = 2e+05, ymin = -2.8e+05, ymax = -2.5e+05, color='red', alpha =0.2)+
annotate("rect", xmin = 1.4e+05, xmax = 1.7e+05, ymin = -1.8e+05, ymax = -2.2e+05, color='red', alpha =0.2)+
annotate("text", x = 1.2e+05, y = -2.8e+05 , label = "strong outliers", color='red')
library(cowplot)
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
library(Metrics)
model_train_rmse <- rmse(ames_train_2$price,predict(model.AIC))
paste('Model RMSE on the training set : ',round(model_train_rmse,0),'in USD')
library(Metrics)
model_train_rmse <- rmse(ames_train_2$price,predict(model.AIC))
paste('Model RMSE on the training set : ',round(model_train_rmse,0),'in USD')
load("ames_test.Rdata")
# Let's create a copy of ames_test and add an age variable
ames_test_2 <- ames_test %>% mutate(age=2021- Year.Built)
# Let see how our model predicts on the test set
test_predict <- predict(model.AIC,newdata = ames_test_2)
# RMSE on the test set
model_test_rmse <- rmse(ames_test_2$price,test_predict)
paste('Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_test_2$price,y=test_predict))+
xlab('real price from test set')+ylab('predicted price')+
ggtitle('Prediction on the test set')
final_model <- lm(log(price) ~ log(Lot.Area) + log(area) + age + Overall.Qual + Overall.Cond +
Bedroom.AbvGr,ames_train_2)
summary(final_model)
# histogram without transformation
hist_price <- ggplot(data=ames_train_2, aes(x=price)) +
geom_histogram() +
ggtitle("distribution of price")
# histogram with lmog  transformation
hist_price_log <- ggplot(data=ames_train_2, aes(x=log(price))) +
geom_histogram() +
ggtitle("distribution of price log transf")
# calling plots
plot_grid(hist_price, hist_price_log, labels = "AUTO")
final_model.AIC <- stepAIC(final_model, k = 2)
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=final_model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = final_model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
load("ames_validation.Rdata")
# Let's create a copy of ames_validation and add an age variable
ames_valid_2 <- ames_validation %>% mutate(age=2021- Year.Built)
# Predictions
train_predict_final <- exp(predict(final_model.AIC,newdata = ames_train_2))
test_predict_test <- exp(predict(final_model.AIC,newdata = ames_test_2))
valid_predict_final <- exp(predict(final_model.AIC,newdata = ames_valid_2))
# RMSE on the training, test and validation sets
final_model_train_rmse <- rmse(ames_train_2$price,train_predict_final)
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_test)
final_model_valid_rmse <- rmse(ames_valid_2$price,valid_predict_final)
paste('Model RMSE on the training set : ',round(final_model_train_rmse,0),'in USD')
paste('Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
paste('Model RMSE on the validation set : ',round(final_model_valid_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_valid_2$price,y=valid_predict_final))+
xlab('real price from validation set')+ylab('predicted price')+
geom_smooth(mapping = aes(x=ames_valid_2$price,y=valid_predict_final),method=lm)+
ggtitle('Prediction on the validation set')
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',precision)
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',round(precision,0))
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',round(precision,1))
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',round(precision,2))
# Let's create a copy of ames_train and add an age variable
ames_train_2 <- ames_train %>% mutate(age=2021- Year.Built)
# Defintion of the Model
house_mod_01 <- lm(price ~ log(Lot.Area) + log(area) + age + Bsmt.Qual + Overall.Qual +  Overall.Cond + Heating + Bedroom.AbvGr, data = ames_train_2 )
# Summary of the model
summary(house_mod_01)
# Let's create a copy of ames_train and add an age variable
ames_train_2 <- ames_train %>% mutate(age=2021- Year.Built)
# Defintion of the Model
house_mod_01 <- lm(price ~ log(Lot.Area) + log(area) + age + Overall.Qual +  Overall.Cond + Heating + Bedroom.AbvGr, data = ames_train_2 )
# Summary of the model
summary(house_mod_01)
# Let's create a copy of ames_train and add an age variable
ames_train_2 <- ames_train %>% mutate(age=2021- Year.Built)
# Defintion of the Model
house_mod_01 <- lm(price ~ log(Lot.Area) + log(area) + age + Overall.Qual +  Overall.Cond + Heating + Bedroom.AbvGr + Land.Slope, data = ames_train_2 )
# Summary of the model
summary(house_mod_01)
library(MASS)
# Model selection using AIC
model.AIC <- stepAIC(house_mod_01, k = 2)
# Model selection using BIC
n=nrow(ames_train_2)
model.BIC <- stepAIC(house_mod_01, k = log(n))
ggplot()+
geom_jitter(mapping = aes(x=na.omit(ames_train_2$price),y=na.omit(model.AIC$residuals)),alpha=0.4, color='black')+
xlab('training set price')+ylab('residuals')+
ggtitle('residuals vs training set prices')+
annotate("rect", xmin = 1.7e+05, xmax = 2e+05, ymin = -2.8e+05, ymax = -2.5e+05, color='red', alpha =0.2)+
annotate("rect", xmin = 1.4e+05, xmax = 1.7e+05, ymin = -1.8e+05, ymax = -2.2e+05, color='red', alpha =0.2)+
annotate("text", x = 1.2e+05, y = -2.8e+05 , label = "strong outliers", color='red')
library(cowplot)
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
library(Metrics)
model_train_rmse <- rmse(ames_train_2$price,predict(model.AIC))
paste('Model RMSE on the training set : ',round(model_train_rmse,0),'in USD')
load("ames_test.Rdata")
# Let's create a copy of ames_test and add an age variable
ames_test_2 <- ames_test %>% mutate(age=2021- Year.Built)
# Let see how our model predicts on the test set
test_predict <- predict(model.AIC,newdata = ames_test_2)
# RMSE on the test set
model_test_rmse <- rmse(ames_test_2$price,test_predict)
paste('Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_test_2$price,y=test_predict))+
xlab('real price from test set')+ylab('predicted price')+
ggtitle('Prediction on the test set')
final_model <- lm(log(price) ~ log(Lot.Area) + log(area) + age + Overall.Qual + Overall.Cond + Land.Slope +
Bedroom.AbvGr,ames_train_2)
summary(final_model)
# histogram without transformation
hist_price <- ggplot(data=ames_train_2, aes(x=price)) +
geom_histogram() +
ggtitle("distribution of price")
# histogram with lmog  transformation
hist_price_log <- ggplot(data=ames_train_2, aes(x=log(price))) +
geom_histogram() +
ggtitle("distribution of price log transf")
# calling plots
plot_grid(hist_price, hist_price_log, labels = "AUTO")
final_model.AIC <- stepAIC(final_model, k = 2)
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=final_model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = final_model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
load("ames_validation.Rdata")
# Let's create a copy of ames_validation and add an age variable
ames_valid_2 <- ames_validation %>% mutate(age=2021- Year.Built)
# Predictions
train_predict_final <- exp(predict(final_model.AIC,newdata = ames_train_2))
test_predict_test <- exp(predict(final_model.AIC,newdata = ames_test_2))
valid_predict_final <- exp(predict(final_model.AIC,newdata = ames_valid_2))
# RMSE on the training, test and validation sets
final_model_train_rmse <- rmse(ames_train_2$price,train_predict_final)
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_test)
final_model_valid_rmse <- rmse(ames_valid_2$price,valid_predict_final)
paste('Model RMSE on the training set : ',round(final_model_train_rmse,0),'in USD')
paste('Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
paste('Model RMSE on the validation set : ',round(final_model_valid_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_valid_2$price,y=valid_predict_final))+
xlab('real price from validation set')+ylab('predicted price')+
geom_smooth(mapping = aes(x=ames_valid_2$price,y=valid_predict_final),method=lm)+
ggtitle('Prediction on the validation set')
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="confidence"))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% filter(price >= lwr,price<=upr) %>% nrow() / nrow(ames_valid_2)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',round(precision,2))
load("ames_train.Rdata")
library(statsr)
library(dplyr)
library(BAS)
library(tidyverse)
ames_train %>%
ggplot()+
geom_boxplot(mapping = aes(x=as.factor(Overall.Qual) ,y=price))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle('Home price vs Overall quality')
ames_train %>% select(price,area) %>%
ggplot()+
geom_jitter(mapping = aes(x=area,y=price),color='darkgreen', alpha=0.5)+
ggtitle('Home price vs Area')
load("ames_train.Rdata")
library(statsr)
library(dplyr)
library(BAS)
library(tidyverse)
ames_train %>%
ggplot()+
geom_boxplot(mapping = aes(x=as.factor(Overall.Qual) ,y=price))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle('Home price vs Overall quality')
ames_train %>% select(price,area) %>%
ggplot()+
geom_jitter(mapping = aes(x=area,y=price),color='darkgreen', alpha=0.5)+
ggtitle('Home price vs Area')
ames_train %>% select(price,Year.Built) %>%
ggplot()+
geom_jitter(mapping = aes(x=2021- Year.Built,y=price),color='darkblue', alpha=0.5)+
geom_smooth(mapping = aes(x=2021- Year.Built,y=price))+
xlab('age')+
ggtitle('Home price vs Age')
# Let's create a copy of ames_train and add an age variable
ames_train_2 <- ames_train %>% mutate(age=2021- Year.Built)
# Defintion of the Model
house_mod_01 <- lm(price ~ log(Lot.Area) + log(area) + age + Overall.Qual +  Overall.Cond + Heating + Bedroom.AbvGr , data = ames_train_2 )
# Summary of the model
summary(house_mod_01)
library(MASS)
# Model selection using AIC
model.AIC <- stepAIC(house_mod_01, k = 2)
# Model selection using BIC
n=nrow(ames_train_2)
model.BIC <- stepAIC(house_mod_01, k = log(n))
ggplot()+
geom_jitter(mapping = aes(x=na.omit(ames_train_2$price),y=na.omit(model.AIC$residuals)),alpha=0.4, color='black')+
xlab('training set price')+ylab('residuals')+
ggtitle('residuals vs training set prices')+
annotate("rect", xmin = 1.7e+05, xmax = 2e+05, ymin = -2.8e+05, ymax = -2.5e+05, color='red', alpha =0.2)+
annotate("rect", xmin = 1.4e+05, xmax = 1.7e+05, ymin = -1.8e+05, ymax = -2.2e+05, color='red', alpha =0.2)+
annotate("text", x = 1.2e+05, y = -2.8e+05 , label = "strong outliers", color='red')
library(cowplot)
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
library(Metrics)
model_train_rmse <- rmse(ames_train_2$price,predict(model.AIC))
paste('Model RMSE on the training set : ',round(model_train_rmse,0),'in USD')
load("ames_test.Rdata")
# Let's create a copy of ames_test and add an age variable
ames_test_2 <- ames_test %>% mutate(age=2021- Year.Built)
# Let see how our model predicts on the test set
test_predict <- predict(model.AIC,newdata = ames_test_2)
# RMSE on the test set
model_test_rmse <- rmse(ames_test_2$price,test_predict)
paste('Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_test_2$price,y=test_predict))+
xlab('real price from test set')+ylab('predicted price')+
ggtitle('Prediction on the test set')
final_model <- lm(log(price) ~ log(Lot.Area) + log(area) + age + Overall.Qual + Overall.Cond +
Bedroom.AbvGr,ames_train_2)
summary(final_model)
# histogram without transformation
hist_price <- ggplot(data=ames_train_2, aes(x=price)) +
geom_histogram() +
ggtitle("distribution of price")
# histogram with lmog  transformation
hist_price_log <- ggplot(data=ames_train_2, aes(x=log(price))) +
geom_histogram() +
ggtitle("distribution of price log transf")
# calling plots
plot_grid(hist_price, hist_price_log, labels = "AUTO")
final_model.AIC <- stepAIC(final_model, k = 2)
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
# histogram
hist_residuals <- ggplot(data=ames_train_2, aes(x=final_model.AIC$residuals)) +
geom_histogram() +
ggtitle("distribution of residuals")
# normal prob plot
prob_residuals <-  ggplot(model.AIC, aes(sample = final_model.AIC$residuals)) +
geom_qq() + stat_qq_line()+
ggtitle("normal probability plot of residuals")
# calling plots
plot_grid(hist_residuals, prob_residuals, labels = "AUTO")
# Let see how our final model predicts on the test set
# exp needed to come back to predicted prices in USD
test_predict_final <- exp(predict(final_model.AIC,newdata = ames_test_2))
# RMSE on the test set
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_final)
paste('Previous Model RMSE on the test set : ',round(model_test_rmse,0),'in USD')
paste('Final Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
load("ames_validation.Rdata")
# Let's create a copy of ames_validation and add an age variable
ames_valid_2 <- ames_validation %>% mutate(age=2021- Year.Built)
# Predictions
train_predict_final <- exp(predict(final_model.AIC,newdata = ames_train_2))
test_predict_test <- exp(predict(final_model.AIC,newdata = ames_test_2))
valid_predict_final <- exp(predict(final_model.AIC,newdata = ames_valid_2))
# RMSE on the training, test and validation sets
final_model_train_rmse <- rmse(ames_train_2$price,train_predict_final)
final_model_test_rmse <- rmse(ames_test_2$price,test_predict_test)
final_model_valid_rmse <- rmse(ames_valid_2$price,valid_predict_final)
paste('Model RMSE on the training set : ',round(final_model_train_rmse,0),'in USD')
paste('Model RMSE on the test set : ',round(final_model_test_rmse,0),'in USD')
paste('Model RMSE on the validation set : ',round(final_model_valid_rmse,0),'in USD')
ggplot()+
geom_point(mapping = aes(x=ames_valid_2$price,y=valid_predict_final))+
xlab('real price from validation set')+ylab('predicted price')+
geom_smooth(mapping = aes(x=ames_valid_2$price,y=valid_predict_final),method=lm)+
ggtitle('Prediction on the validation set')
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="prediction",level=0.95))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% mutate(correct = ifelse(price >= lwr & price <= upr, "Y", "N"))
final_model_cfi <- exp(predict(final_model.AIC,newdata = ames_valid_2, interval="prediction",level=0.95))
# adding the "true" price to the previous variable
precision <- as.data.frame(final_model_cfi) %>% mutate(price=ames_valid_2$price) %>% mutate(correct = ifelse(price >= lwr & price <= upr, "Y", "N"))
precision<- length(which(precision$correct=="Y"))/nrow(precision)
# Precision of the model
paste('Percentage of the 95% CFI on the predictions containing the true price : ',round(precision,2))
knitr::opts_chunk$set(echo = TRUE)
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
titanic_train_init <- read_csv('train.csv')
titanic_test_init <- read_csv('test.csv')
set.seed(50977)
i <- createDataPartition(titanic_train_init$PassengerId, p = 0.8, list=FALSE)
training <- titanic_train_init[i,]
testing <- titanic_train_init[-i,]
str(training)
# Passenger has survided (Y/N) response variable
training$Survived <- as.factor(training$Survived)
testing$Survived <- as.factor(testing$Survived)
# Passenger class (1st to 3rd)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
titanic_test_init$Pclass <- as.factor(titanic_test_init$Pclass)
# Sex
training$Sex <- as.factor(training$Sex)
testing$Sex <- as.factor(testing$Sex)
titanic_test_init$Sex <- as.factor(titanic_test_init$Sex)
# Port of embarcation
training$Embarked <- as.factor(training$Embarked)
testing$Embarked <- as.factor(testing$Embarked)
titanic_test_init$Embarked <- as.factor(titanic_test_init$Embarked)
str(training)
ggplot(training)+
geom_bar(mapping=aes(x=Survived,fill=Pclass))+
facet_wrap(~Pclass)
ggplot(training)+
geom_bar(mapping=(aes(x=Survived,fill=Sex)))+
facet_wrap(~Sex)
ggplot(training)+
geom_density(mapping = aes(Age,fill=Survived,col=Survived),bins=30, alpha=0.5)
training %>% filter (Fare<200) %>% ggplot()+
geom_density(mapping = aes(Fare,fill=Survived,col=Survived),bins=30, alpha=0.5)
training %>% ggplot()+
geom_bar(mapping=aes(x=Survived,fill=Embarked))+
facet_wrap(~Embarked)
training %>% ggplot()+
geom_bar(mapping=aes(x=Survived,fill=Parch))+
facet_wrap(~Parch)
training %>% ggplot()+
geom_bar(mapping=aes(x=Survived,fill=SibSp))+
facet_wrap(~SibSp)
training %>% ggplot()+
geom_jitter(mapping=aes(y=Survived,x=Parch))
training %>%
summarise_all(funs(sum(is.na(.)))) %>% t() / nrow(training)
median_age <- median(na.omit(training$Age))
training$Age[is.na(training$Age)] <- median_age
testing$Age[is.na(testing$Age)] <- median_age
titanic_test_init$Age[is.na(titanic_test_init$Age)] <- median_age
training$Embarked[is.na(training$Embarked)] <- 'S'
testing$Embarked[is.na(testing$Embarked)] <- 'S'
titanic_test_init$Embarked[is.na(titanic_test_init$Embarked)] <- 'S'
knn_train_x <- training %>% select(-Name,-Ticket,-Cabin,-PassengerId)
knn_test_x <- testing %>% select(-Name,-Ticket,-Cabin,-PassengerId)
knn_valid_x <- titanic_test_init %>% select(-Name,-Ticket,-Cabin,-PassengerId)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit <- train(Survived ~ ., data = knn_train_x, method = "knn", trControl = ctrl, preProcess = c("center","scale"), tuneLength = 20)
knnFit
knnPredict <- predict(knnFit,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(knnPredict, testing$Survived )
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
knn_valid_x %>%
summarise_all(funs(sum(is.na(.)))) %>% t() / nrow(training)
median_fare <- median(na.omit(training$Fare))
knn_valid_x$Fare[is.na(knn_valid_x$Fare)] <- median_fare
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
submission <- titanic_test_init
submission$PassengerId <- titanic_test_init$PassengerId
submission$Survived <- knnvalidPredict
submission <- submission %>% select(PassengerId,Survived)
write_csv(submission,'titanic_submission_knn.csv')
knnvalidtrain <- predict(knnFit)
confusionMatrix(knnvalidtrain,knn_train_x$Survived)
glm.fit <- glm(Survived ~ ., data = knn_train_x, family = binomial)
glm.probs <- predict(glm.fit,type = "response",newdata = knn_test_x)
glm.pred <- ifelse(glm.probs > 0.5, "1", "0")
glm.pred <- as.factor(glm.pred)
confusionMatrix(glm.pred, testing$Survived )
rf_model<-train(Survived~.,data=knn_train_x,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
rfPredict <- predict(rf_model,newdata = knn_test_x )
# Checking the confusion matrix
confusionMatrix(rfPredict, testing$Survived )
svm_train_x<- knn_train_x
levels(svm_train_x$Survived)=c("No","Yes")
ctrl <- trainControl(method = "cv", savePred=T, classProb=T)
svm_model <- train(Survived~., data=svm_train_x, method = "svmLinear", trControl = ctrl)
svm_Predict <- predict(svm_model,newdata = knn_test_x )
levels(svm_Predict)=c("0","1")
# Checking the confusion matrix
confusionMatrix(svm_Predict, testing$Survived )
model_average <- (as.numeric(knnPredict)-1 + as.numeric(svm_Predict)-1 + as.numeric(glm.pred)-1) / 3
model_average
model_average <- ifelse(model_average > 0.5, "1", "0")
model_average <- as.factor(model_average)
confusionMatrix(model_average,testing$Survived)
knnvalidPredict <- predict(knnFit,newdata = knn_valid_x )
rfvalidPredict <- predict(rf_model,newdata = knn_valid_x )
svmvalidPredict <- predict(svm_model,newdata = knn_valid_x )
levels(svmvalidPredict)=c("0","1")
modelpredict_average <- (as.numeric(knnvalidPredict)-1 + as.numeric(rfvalidPredict)-1 + as.numeric(svmvalidPredict)-1) / 3
modelpredict_average <- ifelse(modelpredict_average > 0.5, "1", "0")
modelpredict_average <- as.factor(modelpredict_average)
submission$Survived <- modelpredict_average
submission <- submission %>% select(PassengerId,Survived)
write_csv(submission,'titanic_submission_ave.csv')
setwd("~/Documents/01 - DataScience/01 - R/JohnsHopkins/M09 - W01")
shiny::runApp('JH_M09_W01b')
runApp('JH_M09_W01b')
runApp('JH_M09_W01b')
runApp('JH_M09_W01b')
runApp('JH_M09_W01b')
runApp('JH_M09_W01b')
